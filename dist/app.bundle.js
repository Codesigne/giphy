!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=4)}([function(t,n,e){var r=e(1);"string"==typeof r&&(r=[[t.i,r,""]]);var i={insert:"head",singleton:!1};e(3)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(2)(!1)).push([t.i,"body {\r\n    margin: 0;\r\n    height: calc(100vh + 10px);\r\n}\r\n\r\n/* .modal {\r\n    display: none;\r\n  }\r\n  \r\n  .modal.is-open {\r\n    display: block;\r\n  } */\r\n         \r\n.gif {\r\n    height: 200px;\r\n    width:100%;\r\n    max-width: 200px;\r\n    cursor: pointer;\r\n}",""])},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),a=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}var o,s,c;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2],"{").concat(e,"}"):e})).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var o=0;o<t.length;o++){var s=t[o];null!=s[0]&&r[s[0]]||(e&&!s[2]?s[2]=e:e&&(s[2]="(".concat(s[2],") and (").concat(e,")")),n.push(s))}},n}},function(t,n,e){"use strict";var r,i={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}();function s(t,n){for(var e=[],r={},i=0;i<t.length;i++){var a=t[i],o=n.base?a[0]+n.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[o]?r[o].parts.push(s):e.push(r[o]={id:o,parts:[s]})}return e}function c(t,n){for(var e=0;e<t.length;e++){var r=t[e],a=i[r.id],o=0;if(a){for(a.refs++;o<a.parts.length;o++)a.parts[o](r.parts[o]);for(;o<r.parts.length;o++)a.parts.push(v(r.parts[o],n))}else{for(var s=[];o<r.parts.length;o++)s.push(v(r.parts[o],n));i[r.id]={id:r.id,refs:1,parts:s}}}}function u(t){var n=document.createElement("style");if(void 0===t.attributes.nonce){var r=e.nc;r&&(t.attributes.nonce=r)}if(Object.keys(t.attributes).forEach((function(e){n.setAttribute(e,t.attributes[e])})),"function"==typeof t.insert)t.insert(n);else{var i=o(t.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}return n}var l,f=(l=[],function(t,n){return l[t]=n,l.filter(Boolean).join("\n")});function p(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=f(n,i);else{var a=document.createTextNode(i),o=t.childNodes;o[n]&&t.removeChild(o[n]),o.length?t.insertBefore(a,o[n]):t.appendChild(a)}}function d(t,n,e){var r=e.css,i=e.media,a=e.sourceMap;if(i&&t.setAttribute("media",i),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,g=0;function v(t,n){var e,r,i;if(n.singleton){var a=g++;e=h||(h=u(n)),r=p.bind(null,e,a,!1),i=p.bind(null,e,a,!0)}else e=u(n),r=d.bind(null,e,n),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){(n=n||{}).attributes="object"==typeof n.attributes?n.attributes:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a());var e=s(t,n);return c(e,n),function(t){for(var r=[],a=0;a<e.length;a++){var o=e[a],u=i[o.id];u&&(u.refs--,r.push(u))}t&&c(s(t,n),n);for(var l=0;l<r.length;l++){var f=r[l];if(0===f.refs){for(var p=0;p<f.parts.length;p++)f.parts[p]();delete i[f.id]}}}}},function(t,n,e){"use strict";e.r(n);var r={activeGif:"",searchValue:"",activeApi:"trending",trending:{pagination:{total_count:null,count:null,offset:0,response_pending:!1}},search:{pagination:{total_count:null,count:null,offset:0,response_pending:!1}}};const i="https://api.giphy.com/v1/gifs",a="rXduKJTlpl96RvM2HsHtlvGh01YYMZD2";e(0);const o=$("[data-template='gifHolder']  img").clone(!0,!0);function s(t,n){r[n].pagination.response_pending=!1,Object.assign(r[n].pagination,{...t.pagination}),t.pagination.total_count>0?t.data.forEach((function(t,n){let e=o.clone(1,1);e.attr({src:t.images.fixed_width_downsampled.webp,id:t.id,"data-details":JSON.stringify(t)}),$("[data-result]").append(e)})):$("[data-result]").append(`No result for ${r.searchValue}`)}function c(t){return()=>{if((null==r[t].pagination.total_count||r[t].pagination.offset+r[t].pagination.offset<r[t].pagination.total_count)&&1!=r[t].pagination.response_pending){switch(t){case"search":(function(t){return $.ajax({url:`${i}/search?api_key=${a}&q=${r.searchValue}&limit=5&offset=${r.search.pagination.offset+5}&rating=G&lang=en`})})().then(n=>{s(n,t)},t=>{$("[data-result]").append("Something went wrong")});break;case"trending":(function(t){return $.ajax({url:`${i}/trending?api_key=${a}&q=prafull&limit=5&offset=${r.trending.pagination.offset+5}`})})().then(n=>{s(n,t)},t=>{$("[data-result]").append("Something went wrong")})}r[t].pagination.response_pending=!0}}}var u=c("search"),l=c("trending");function f(t){switch(t){case"search":u();break;case"trending":default:l()}}$("#inputeSearch").on("input",(function(t){t.preventDefault(),""==this.value?r.activeApi="trending":(r.searchValue=this.value,r.activeApi="search")})),$("#seachGify").on("click",(function(t){t.preventDefault(),$("[data-result]").empty(),r.search.pagination.offset=0,r.trending.pagination.offset=0,f(r.activeApi)})),$(window).on("scroll",(function(t){t.preventDefault(),console.log(r),Math.floor($(this).scrollTop())+10>=$(document).height()-$(window).height()&&f(r.activeApi)})),$("body").on("click",".gif",(function(){r.activeGif=this.id})),l()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,